#!/usr/bin/env ruby
require 'passivedns/client'
require 'structformatter'
require 'getoptlong'
require 'yaml'

def pdnslookup(state,pdnsclient,recursedepth=1,wait=0,debug=false,limit=nil)
	puts "pdnslookup: #{state.level} #{recursedepth}" if debug
	level = 0
	while level < recursedepth
		puts "pdnslookup: #{level} < #{recursedepth}" if debug
		state.each_query(recursedepth) do |q|
			rv = pdnsclient.query(q,limit)
			if rv
				rv.each do |r|
					if ["A","AAAA","NS","CNAME","PTR"].index(r.rrtype)
						puts "pdnslookup: #{r.to_s}" if debug
						state.add_result(r)
					end
				end
			else
				state.update_query(rv,'failed')
			end
			sleep wait if level < recursedepth
		end
		level += 1
	end
	state
end

def printresults(state,format,sep="\t")
	case format
	when 'text'
		puts PassiveDNS::PDNSResult.members.join(sep)
		puts state.to_s(sep)
	when 'yaml'
		puts state.to_yaml
	when 'xml'
		puts state.to_xml
	when 'json'
		puts state.to_json
	when 'gdf'
		puts state.to_gdf
	when 'graphviz'
		puts state.to_graphviz
	when 'graphml'
		puts state.to_graphml
	end
end

def usage
	puts "Usage: #{$0} [-d [bedvt]] [-og|-ov|-om|-oc|-ox|-oy|-oj|-ot] [-os <sep>] [-f <file>] [-r#|-w#|-v] [-l <count>] <ip|domain|cidr>"
	puts "  -dbedvt uses all of the available passive dns databases"
	puts "  -db only use BFK"
	puts "  -de only use CERT-EE (default)"
	puts "  -dd only use DNSDB (formerly ISC)"
	puts "  -dv only use VirusTotal"
  puts "  -dt only use TCPIPUtils"
  puts "  -dvt uses VirusTotal and TCPIPUtils (for example)"
	puts ""
	puts "  -og outputs a link-nodal GDF visualization definition"
	puts "  -ov outputs a link-nodal graphviz visualization definition"
	puts "  -om output a link-nodal graphml visualization definition"
	puts "  -oc outputs CSV"
	puts "  -ox outputs XML"
	puts "  -oy outputs YAML"
	puts "  -oj outputs JSON"
	puts "  -ot outputs ASCII text (default)"
	puts "  -os <sep> specifies a field separator for text output, default is tab"
	puts ""
	puts "  -f[file] specifies a sqlite3 database used to read the current state - useful for large result sets and generating graphs of previous runs."
	puts "  -r# specifies the levels of recursion to pull. **WARNING** This is quite taxing on the pDNS servers, so use judiciously (never more than 3 or so) or find yourself blocked!"
	puts "  -w# specifies the amount of time to wait, in seconds, between queries (Default: 0)"
	puts "  -v outputs debugging information"
  puts "  -l <count> limits the number of records returned per passive dns database queried."
	exit
end

opts = GetoptLong.new(
	[ '--help', '-h', GetoptLong::NO_ARGUMENT ],
	[ '--debug', '-z', GetoptLong::NO_ARGUMENT ],
  [ '--database', '-d', GetoptLong::REQUIRED_ARGUMENT ],
	
	[ '--gdf', '-g', GetoptLong::NO_ARGUMENT ],
	[ '--graphviz', '-v', GetoptLong::NO_ARGUMENT ],
	[ '--graphml', '-m', GetoptLong::NO_ARGUMENT ],
	[ '--csv', '-c', GetoptLong::NO_ARGUMENT ],
	[ '--xml', '-x', GetoptLong::NO_ARGUMENT ],
	[ '--yaml', '-y', GetoptLong::NO_ARGUMENT ],
	[ '--json', '-j', GetoptLong::NO_ARGUMENT ],
	[ '--text', '-t', GetoptLong::NO_ARGUMENT ],
	[ '--sep', '-s', GetoptLong::REQUIRED_ARGUMENT ],
	
	[ '--sqlite3', '-f', GetoptLong::REQUIRED_ARGUMENT ],
	[ '--recurse', '-r', GetoptLong::REQUIRED_ARGUMENT ],
	[ '--wait', '-w', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--limit', '-l', GetoptLong::REQUIRED_ARGUMENT ]
)

# sets the default search methods
pdnsdbs = []
format = "text"
sep = "\t"
recursedepth = 1
wait = 0
res = nil
debug = false
sqlitedb = nil
limit = nil

opts.each do |opt, arg|
	case opt
	when '--help'
		usage
	when '--debug'
		debug = true
  when '--database'
    arg.split(//).each do |c|
      case c
      when ','
      when 'b'
    		pdnsdbs << "bfk"
      when 'e'
    		pdnsdbs << "certee"
      when 'd'
    		pdnsdbs << "dnsdb"
      when 'v'
    		pdnsdbs << "virustotal"
      when 't'
        pdnsdbs << "tcpiputils"
      else
        raise "Unknown passive DNS database identifier: #{c}"
      end
    end
	when '--gdf'
		format = 'gdf'
	when '--graphviz'
		format = 'graphviz'
	when '--graphml'
		format = 'graphml'
	when '--csv'
		format = 'text'
		sep = ','
	when '--yaml'
		format = 'yaml'
	when '--xml'
		format = 'xml'
	when '--json'
		format = 'json'
	when '--text'
		format = 'text'
	when '--sep'
		sep = arg
	when '--recurse'
		recursedepth = arg.to_i
		if recursedepth > 3
			$stderr.puts "WARNING:  a recursedepth of > 3 can be abusive, please reconsider: sleeping 60 seconds for sense to come to you (hint: hit CTRL-C)"
			sleep 60
		end
	when '--wait'
		wait = arg.to_i
	when '--sqlite3'
		sqlitedb = arg
  when '--limit'
    limit = arg.to_i
	else
		usage
	end
end

if pdnsdbs.length == 0
	pdnsdbs << "certee"
end

if pdnsdbs.index("bfk") and recursedepth > 1 and wait < 60
	wait = 60
	$stderr.puts "Enforcing a minimal 60 second wait when using BFK for recursive crawling"
end

if debug
	$stderr.puts "Using the following databases: #{pdnsdbs.join(", ")}"
  $stderr.puts "Recursions: #{recursedepth}, Wait time: #{wait}, Limit: #{limit or 'none'}"
  if format == "text" or format == "csv"
    $stderr.puts "Output format: #{format} (sep=\"#{sep}\")"
  else
    $stderr.puts "Output format: #{format}"
  end
  if ENV['http_proxy']
    $stderr.puts "Using proxy settings: http_proxy=#{ENV['http_proxy']}, https_proxy=#{ENV['https_proxy']}"
  end
end

state = nil
if sqlitedb
	state = PassiveDNS::PDNSToolStateDB.new(sqlitedb)
else
	state = PassiveDNS::PDNSToolState.new
end
state.debug = true if debug

pdnsclient = PassiveDNS::Client.new(pdnsdbs)
pdnsclient.debug = debug

if ARGV.length > 0
	ARGV.each do |arg|
		state.add_query(arg,'pending',0)
	end
else
	$stdin.each_line do |l|
		state.add_query(l.chomp,'pending',0)
	end
end
pdnslookup(state,pdnsclient,recursedepth,wait,debug,limit)
printresults(state,format,sep)
